%{
----------------------------------------------------------------------------

T

----------------------------------------------------------------------------
%}
function OdorTestNewOlf

global BpodSystem

%% Define parameters

S = BpodSystem.ProtocolSettings; % Load settings chosen in launch manager into current workspace as a struct called S
if isempty(fieldnames(S))  % If settings file was an empty struct, populate struct with default settings
    S.GUI.SessionTrials = 1000;
    S.GUI.OdorTime = 3;
    S.GUI.OdorInterval = 4;
    S.GUI.OdorHeadstart = 3;
    S.GUI.Port = 1; %0 = center, 1 = left, 2 = right
    S.GUI.OdorID = 1; % 0 = odor 1
end


%% LOAD SERIAL MESSAGES

LoadSerialMessages('ValveModule1',{['O' 1],['C' 1],['O' 2],['C' 2],['O' 3],...
    ['C' 3],['O' 4],['C' 4],['O' 5],['C' 5],['O' 6],['C' 6],['O' 7],['C' 7],...
    ['O' 8],['C' 8]});
LoadSerialMessages('ValveModule2',{['O' 1],['C' 1],['O' 2],['C' 2],['O' 3],...
    ['C' 3],['O' 4],['C' 4],['O' 5],['C' 5],['O' 6],['C' 6],['O' 7],['C' 7],...
    ['O' 8],['C' 8]});
LoadSerialMessages('ValveModule3',{['O' 1],['C' 1],['O' 2],['C' 2],['O' 3],...
    ['C' 3],['O' 4],['C' 4],['O' 5],['C' 5],['O' 6],['C' 6],['O' 7],['C' 7],...
    ['O' 8],['C' 8]});


%% Initialize plots

BpodParameterGUI('init', S); % Initialize parameter GUI plugin

%% MAIN TRIAL LOOP

MaxTrials = S.GUI.SessionTrials;

%% Main loop (runs once per trial)
for currentTrial = 1:MaxTrials
    S = BpodParameterGUI('sync', S); % Sync parameters with BpodParameterGUI plugin

    MaxTrials = S.GUI.SessionTrials;
    odor = S.GUI.OdorID; % logic here to cycle odors
    port = S.GUI.Port;

    %--- Assemble state machine
    sma = NewStateMachine();
%     sma = AddState(sma, 'Name', 'PreloadOdor', ...
%         'Timer', S.GUI.OdorHeadstart,...
%         'StateChangeConditions', {'Tup', 'OdorOn'},...
%         'OutputActions', PreloadOdor(odor));    
%     sma = AddState(sma, 'Name', 'OdorOn', ...
%         'Timer', S.GUI.OdorTime,...
%         'StateChangeConditions', {'Tup', 'OdorOff'},...
%         'OutputActions', PresentOdor(port));
%     sma = AddState(sma, 'Name', 'OdorOff', ...
%         'Timer', S.GUI.OdorInterval,...
%         'StateChangeConditions', {'Tup', '>exit'},...
%         'OutputActions', [PresentOdor(port),PreloadOdor(odor)]);

    sma = AddState(sma, 'Name', 'PreloadOdor', ...
        'Timer', S.GUI.OdorHeadstart,...
        'StateChangeConditions', {'Tup', 'OdorOn'},...
        'OutputActions', [{'PWM2',50},OdorTest]);   %{'ValveModule2',2,'ValveModule1',2,'ValveModule1',1,'ValveModule2',1}
    sma = AddState(sma, 'Name', 'OdorOn', ...
        'Timer', S.GUI.OdorTime,...
        'StateChangeConditions', {'Tup', 'OdorOff'},...
        'OutputActions', [{'PWM2',50},OdorTest]);%{'ValveModule2',1,'ValveModule1',1,'ValveModule1',2,'ValveModule2',2}
    sma = AddState(sma, 'Name', 'OdorOff', ...
        'Timer', S.GUI.OdorInterval,...
        'StateChangeConditions', {'Tup', '>exit'},...
        'OutputActions', {});     

    SendStateMatrix(sma); % Send state machine to the Bpod state machine device
    RawEvents = RunStateMatrix; % Run the trial and return events

    %--- Package and save the trial's data, update plots
    if ~isempty(fieldnames(RawEvents)) % If you didn't stop the session manually mid-trial
        TurnOffAllOdors();
        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); % Adds raw events to a human-readable data struct
        BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)
        SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file

        %--- Typically a block of code here will update online plots using the newly updated BpodSystem.Data

    end

    %--- This final block of code is necessary for the Bpod console's pause and stop buttons to work
    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.
    if BpodSystem.Status.BeingUsed == 0
        TurnOffAllOdors();
        return
    end
end
end


%% ODOR CONTROL

% to preload, turn off control and turn on other odor (still going to
% exhaust)

function actions = OdorOnTest
    cmd1 = {'ValveModule1',1};
    cmd2 = {'ValveModule1',3};
    actions = [cmd1,cmd2];
end

function actions = OdorOffTest
    cmd1 = {'ValveModule1',2};
    cmd2 = {'ValveModule1',2};
    actions = [cmd1,cmd2];
end

function Actions = PreloadOdor(odorID)
    cmd1 = {'ValveModule1',1};
    cmd2 = {'ValveModule2',1};
    cmd3 = {'ValveModule1',odorID+1};
    cmd4 = {'ValveModule2',odorID+1};    
    Actions = [cmd1,cmd2,cmd3,cmd4];
end

function Actions = PresentOdor(port)
    switch port
        case 0 % center
            cmd1 = {'ValveModule3',1};
            cmd2 = {'ValveModule3',2};
        case 1 % left
            cmd1 = {'ValveModule3',3};
            cmd2 = {'ValveModule3',4};
        case 2 % right
            cmd1 = {'ValveModule3',5};
            cmd2 = {'ValveModule3',6};
    end
    Actions = [cmd1,cmd2];
end

function TurnOffAllOdors()
    for v = 1:8
        ModuleWrite('ValveModule1',['C' v]);
        ModuleWrite('ValveModule2',['C' v]);
        ModuleWrite('ValveModule3',['C' v]);
    end 
end

